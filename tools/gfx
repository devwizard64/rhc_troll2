#!/usr/bin/env python3

import sys
import os

ply_p = {
	"uchar": int,
	"short": int,
	"uint":  int,
	"float": float,
}

def ply_read(fn):
	with open(fn, "r") as f: data = f.read()
	line = data.split("\n")
	i = 0
	element = []
	while True:
		argv = line[i].split()
		i += 1
		if   argv[0] == "property":
			element[-1][-1].append(argv[1:])
		elif argv[0] == "element":
			element.append((argv[1], int(argv[2]), []))
		elif argv[0] == "end_header":
			break
	ply = {}
	for name, n, property in element:
		ply[name] = []
		for _ in range(n):
			argv = line[i].split()
			i += 1
			a = 0
			obj = {}
			for p in property:
				if p[0] == "list":
					_, n, t, o = p
					n = ply_p[n](argv[a])
					a += 1
					obj[o] = lst = []
					for _ in range(n):
						lst.append(ply_p[t](argv[a]))
						a += 1
				else:
					t, o = p
					obj[o] = ply_p[t](argv[a])
					a += 1
			ply[name].append(obj)
	return ply

def gfx_flush(buf, name):
	if len(buf[2]) > 0:
		buf[1].append("gsSPVertex(&vtx_%s[%d], %d, 0),\n" % (
			name, len(buf[0]), len(buf[2])
		))
	for i in range(0, len(buf[3]) & ~1, 2):
		buf[1].append(
			"gsSP2Triangles(%2d, %2d, %2d, 0, %2d, %2d, %2d, 0),\n" % tuple(
				buf[3][i+0] + buf[3][i+1]
			)
		)
	if len(buf[3]) & 1:
		buf[1].append("gsSP1Triangle(%2d, %2d, %2d, 0),\n" % tuple(buf[3][-1]))
	buf[0] += buf[2]
	buf[2] = []
	buf[3] = []

def sh(x): return max(-0x8000, min(+0x7FFF, int(round(x))))
def sb(x): return max(-0x80,   min(+0x7F,   int(round(x))))

gfx_v_table = {
	"x": (lambda v: "%4d"    % (sb(0x80*v["nx"]) if "nx"     in v else 0)),
	"y": (lambda v: "%4d"    % (sb(0x80*v["ny"]) if "ny"     in v else 0)),
	"z": (lambda v: "%4d"    % (sb(0x80*v["nz"]) if "nz"     in v else 0)),
	"r": (lambda v: "0x%02X" % (v["red"]         if "red"    in v else 0)),
	"g": (lambda v: "0x%02X" % (v["green"]       if "green"  in v else 0)),
	"b": (lambda v: "0x%02X" % (v["blue"]        if "blue"   in v else 0)),
	"a": (lambda v: "0x%02X" % (v["alpha"]       if "alpha"  in v else 0)),
}

def gfx_v(x):
	return gfx_v_table[x] if x in gfx_v_table else lambda v: x

def gfx_write(arg, path, name, ply, ini):
	vtx = ply["vertex"]
	tri = []
	for face in ply["face"]:
		face = face["vertex_indices"]
		for i in range(len(face)-2):
			tri.append((face[0], face[1+i], face[2+i]))
	buf = [[], [], [], []]
	for t in tri:
		cnt = arg["-v"] - 3
		for v in t:
			if not arg["-g"] and v in buf[2]: cnt += 1
		if len(buf[2]) > cnt: gfx_flush(buf, name)
		lst = []
		for v in t:
			if not arg["-g"] and v in buf[2]:
				lst.append(buf[2].index(v))
			else:
				lst.append(len(buf[2]))
				buf[2].append(v)
		buf[3].append(lst)
	gfx_flush(buf, name)
	ss, st, ts, tt = [float(x) for x in ini["t"]]
	r = gfx_v(ini["s"][0])
	g = gfx_v(ini["s"][1])
	b = gfx_v(ini["s"][2])
	a = gfx_v(ini["s"][3])
	data = ("static Vtx vtx_%s[] =\n{\n" % name) + "".join([
		"\t{{{%6d, %6d, %6d}, 0, {%6d, %6d}, {%s, %s, %s, %s}}},\n" % (
			sh(vtx[v]["x"]),
			sh(vtx[v]["y"]),
			sh(vtx[v]["z"]),
			sh(0x20*(ts + ss*(    vtx[v]["s"] if "s" in vtx[v] else 0.0))),
			sh(0x20*(tt + st*(1.0-vtx[v]["t"] if "t" in vtx[v] else 0.0))),
			r(vtx[v]),
			g(vtx[v]),
			b(vtx[v]),
			a(vtx[v]),
		)
		for v in buf[0]
	]) + "};\n"
	with open(path + ".vtx.h", "w") as f: f.write(data)
	data = "".join(buf[1])
	with open(path + ".h", "w") as f: f.write(data)

arg = {
	None: "",
	"-o": "",
	"-v": 16,
	"-g": False,
}
i = 1
while i < len(sys.argv):
	x = sys.argv[i]
	i += 1
	if x in arg:
		if type(arg[x]) == bool:
			arg[x] = True
		elif type(arg[x]) in {int, str}:
			try:
				arg[x] = type(arg[x])(sys.argv[i])
				i += 1
			except:
				print("error: bad arg '%s'" % " ".join(sys.argv[i-1:i+1]))
				sys.exit(1)
	else:
		arg[None] = x
path = arg["-o"].rpartition(".")[0]
obj, name = os.path.split(path)
name = os.path.split(obj)[-1] + "_" + name
ply = ply_read(arg[None])
ini = {
	"v": ["0", "16"],
	"t": ["0", "0", "0", "0"],
	"s": ["x", "y", "z", "a"],
}
fn = arg[None].rpartition(".")[0] + ".ini"
if os.path.isfile(fn):
	with open(fn, "r") as f: data = f.read()
	for line in data.split("\n"):
		i, _, lst = line.partition("=")
		ini[i] = lst.split(",")
gfx_write(arg, path, name, ply, ini)
